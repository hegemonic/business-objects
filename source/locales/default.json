{
  "ArgumentError": {
    "default": "The passed value is invalid.",
    "enumType": "{0} is not an enumeration type.",
    "rule": "A Rule constructor can accept three kind of argument: a string as the message, an integer as the priority and a Boolean as the stopsProcessing argument.",
    "propManCtor": "All arguments of PropertyManager constructor but the first must be a PropertyInfo object.",
    "propManItem": "The PropertyManager has no item named {0}.",

    "defined": "The argument must be supplied.",
    "required": "The argument is required.",
    "string": "The argument must be a string value.",
    "optString": "The argument must be a string value or null.",
    "manString": "The argument must be a non-empty string.",
    "optNumber": "The argument must be a number value or null.",
    "manNumber": "The argument must be a number value.",
    "optInteger": "The argument must be an integer value or null.",
    "manInteger": "The argument must be an integer value.",
    "optBoolean": "The argument must be a Boolean value or null.",
    "manBoolean": "The argument must be a Boolean value.",
    "optObject": "The argument must be an object or null.",
    "manObject": "The argument must be an object.",
    "optFunction": "The argument must be a function or null.",
    "manFunction": "The argument must be a function.",
    "optType": "The argument must be a {0} object or null.",
    "manType": "The argument must be a {0} object.",
    "enumMember": "The argument must be a {0} item.",
    "optArray": "The argument must be an array of {0} objects, or a single {0} object or null.",
    "manArray": "The argument must be an array of {0} objects or a single {0} object.",
    "optArrayPrim": "The argument must be an array of {0} values, or a single {0} values or null.",
    "manArrayPrim": "The argument must be an array of {0} values or a single {0} values.",

    "c_defined": "The {1} argument of {0} constructor must be supplied.",
    "c_required": "The {1} argument of {0} constructor is required.",
    "c_string": "The {1} argument of {0} constructor must be a string.",
    "c_optString": "The {1} argument of {0} constructor must be a string or null.",
    "c_manString": "The {1} argument of {0} constructor must be a non-empty string.",
    "c_optNumber": "The {1} argument of {0} constructor must be a number value or null.",
    "c_manNumber": "The {1} argument of {0} constructor must be a number value.",
    "c_optInteger": "The {1} argument of {0} constructor must be an integer value or null.",
    "c_manInteger": "The {1} argument of {0} constructor must be an integer value.",
    "c_optBoolean": "The {1} argument of {0} constructor must be a Boolean value or null.",
    "c_manBoolean": "The {1} argument of {0} constructor must be a Boolean value.",
    "c_optObject": "The {1} argument of {0} constructor must be an object or null.",
    "c_manObject": "The {1} argument of {0} constructor must be an object.",
    "c_optFunction": "The {1} argument of {0} constructor must be a function or null.",
    "c_manFunction": "The {1} argument of {0} constructor must be a function.",
    "c_optType": "The {1} argument of {0} constructor must be a {2} object or null.",
    "c_manType": "The {1} argument of {0} constructor must be a {2} object.",
    "c_enumMember": "The {1} argument of {0} constructor must be a {2} item.",
    "c_optArray": "The {1} argument of {0} constructor must be an array of {2} objects, or a single {2} object or null.",
    "c_manArray": "The {1} argument of {0} constructor must be an array of {2} objects or a single {2} object.",
    "c_optArrayPrim": "The {1} argument of {0} constructor must be an array of {2} values, or a single {2} values or null.",
    "c_manArrayPrim": "The {1} argument of {0} constructor must be an array of {2} values or a single {2} values.",

    "m_defined": "The {2} argument of {0}.{1} method must be supplied.",
    "m_required": "The {2} argument of {0}.{1} method is required.",
    "m_string": "The {2} argument of {0}.{1} method must be a string.",
    "m_optString": "The {2} argument of {0}.{1} method must be a string or null.",
    "m_manString": "The {2} argument of {0}.{1} method must be a non-empty string.",
    "m_optNumber": "The {2} argument of {0}.{1} method must be a number value or null.",
    "m_manNumber": "The {2} argument of {0}.{1} method must be a number value.",
    "m_optInteger": "The {2} argument of {0}.{1} method must be an integer value or null.",
    "m_manInteger": "The {2} argument of {0}.{1} method must be an integer value.",
    "m_optBoolean": "The {2} argument of {0}.{1} method must be a Boolean value or null.",
    "m_manBoolean": "The {2} argument of {0}.{1} method must be a Boolean value.",
    "m_optObject": "The {2} argument of {0}.{1} method must be an object or null.",
    "m_manObject": "The {2} argument of {0}.{1} method must be an object.",
    "m_optFunction": "The {2} argument of {0}.{1} method must be a function or null.",
    "m_manFunction": "The {2} argument of {0}.{1} method must be a function.",
    "m_optType": "The {2} argument of {0}.{1} method must be a {3} object or null.",
    "m_manType": "The {2} argument of {0}.{1} method must be a {3} object.",
    "m_enumMember": "The {2} argument of {0}.{1} method must be a {3} item.",
    "m_optArray": "The {2} argument of {0}.{1} method must be an array of {3} objects, or a single {3} object or null.",
    "m_manArray": "The {2} argument of {0}.{1} method must be an array of {3} objects or a single {3} object.",
    "m_optArrayPrim": "The {2} argument of {0}.{1} method must be an array of {3} values, or a single {3} values or null.",
    "m_manArrayPrim": "The {2} argument of {0}.{1} method must be an array of {3} values or a single {3} values.",

    "c_itemType": "The itemType argument of {0} must be {1} type.",
    "c_parent": "The parent argument of {0} constructor must be {1} type.",
    "m_notInit": "The {2} argument of {0}.{1} method is not initialized.",
    "m_null": "The {2} argument of {0}.{1} method must be null.",
    "p_enumMember": "The value of {0}.{1} property must be a {2} item."
  },
  "ConfigurationError": {
    "default": "An error occurred in the business objects' configuration.",
    "string": "The value of {0} property of business objects' configuration must be a string.",
    "file": "The value of {0} property of business objects' configuration is not a valid file path: {1}",
    "directory": "The value of {0} property of business objects' configuration is not a valid directory path: {1}",
    "function": "The file defined by the {0} property of business objects' configuration must return a function: {1}",
    "enumMember": "The value of {0} property of business objects' configuration must be a {1} item.",
    "userInfo": "The function defined by the userReader property of business objects' configuration must return a UserInfo object.",
    "noConMan": "The connection manager is required.",
    "wrongConMan": "The connection manager must inherit ConnectionManagerBase type."
  },
  "I18nError": {
    "default": "An error occurred in the business objects' localization.",
    "string": "The value of {0} property of i18n.initialize method must be a string.",
    "file": "The value of {0} property of i18n.initialize method is not a valid file path: {1}",
    "directory": "The value of {0} property of i18n.initialize method is not a valid directory path: {1}",
    "function": "The file defined by the {0} property of i18n.initialize method must return a function: {1}",
    "c_optString": "The {0} argument of i18n constructor must be a string or null.",
    "m_manString": "The {0} argument of i18n.get method must be a non-empty string.",
    "ready": "i18n is already initialized."
  },
  "DataTypeError": {
    "default": "The data type of the passed value is invalid.",
    "boolean": "The passed value is not Boolean.",
    "date": "The passed value is not DateTime.",
    "decimal": "The passed value is not Decimal.",
    "integer": "The passed value is not Integer.",
    "text": "The passed value is not Text."
  },
  "EnumerationError": {
    "default": "An enumeration error occurred.",
    "enumValue": "The passed value ({1}) is not a {0} item.",
    "enumName": "The passed name ({1}) is not a {0} item."
  },
  "NotImplementedError": {
    "default": "The method is not implemented.",
    "method": "The {0}.{1} method is not implemented."
  },
  "DaoError": {
    "default": "A data access object error occurred.",
    "c_manString": "The {0} argument of a data access object's constructor must be a non-empty string.",
    "m_manString": "The {1} argument of data access object's {0} method must be a non-empty string.",
    "f_manString": "The {0} argument of daoBuilder function must be a non-empty string.",
    "filePath": "The {0} argument of daoBuilder function is not a valid file path: {1}",
    "noDaoFile": "The required data access file does not exist: {0}",
    "daoCtor": "The data access file must return a constructor: {0}",
    "daoType": "The data access object must inherit DaoBase type: {0}",
    "noMethod": "{0} object has no method named {1}."
  },
  "DataPortalError": {
    "create": "Creating {0} has failed.",
    "fetch": "Fetching {0} has failed.",
    "insert": "Inserting {0} has failed.",
    "update": "Updating {0} has failed.",
    "remove": "Removing {0} has failed.",
    "execute": "Executing {0} has failed."
  },
  "Rules": {
    "required": "Property {0} is required.",
    "dependency": "--- dependency rule ---",
    "expression": "Property {0} is invalid.",
    "lengthIs": "The length of property {0} has to be {1} characters.",
    "lengthIs1": "The length of property {0} has to be 1 character.",
    "maxLength": "The length of property {0} cannot exceed {1} characters.",
    "maxLength1": "The length of property {0} cannot exceed 1 character.",
    "maxValue": "The value of property {0} cannot exceed {1}.'",
    "minLength": "The length of property {0} has to be {1} characters at least.",
    "minLength1": "The length of property {0} has to be 1 character at least.",
    "minValue": "The value of property {0} has to be {1} at least.",
    "isInRole": "The user is not member of {0} role.",
    "isInAllRoles": "The user is not member of all roles of the following: {0}",
    "isInAnyRole": "The user is not member of any role of the following: {0}",
    "isNotInRole": "The user is member of {0} role.",
    "isNotInAnyRole": "The user is member of some roles of the following: {0}",
    "invalid": "The model is invalid."
  },
  "AuthorizationError": {
    "default": "The user has no permission to execute the action."
  },
  "ModelError": {
    "default": "An error occurred in the model.",
    "readCollection": "Cannot read properties of {0}.{1} collection.",
    "writeCollection": "Cannot write properties of {0}.{1} collection.",
    "noProperty": "{0} model has no property named {1}.",
    "getValue": "Read-only model's properties cannot be copied to data transfer object.",
    "setValue": "Read-only model's properties cannot be copied from client transfer object.",
    "readOnly": "{0}.{1} property is read-only.",
    "transition": "Illegal state transition: {0} => {1}",
    "propertyArg0": "The {1} property of {0} expects a function without arguments.",
    "propertyArg1": "The {1} property of {0} expects a function with 1 argument.",
    "propertyArgN": "The {1} property of {0} expects a function with {2} arguments."
  },
  "default": "This is a test message."
}